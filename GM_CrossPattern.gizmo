Group {
 name GM_CrossPattern
 tile_color 0xd5ff1dff
 selected true
 xpos 1390
 ypos -442
 addUserKnob {20 User}
 addUserKnob {6 over_original l "Over Original Image" +STARTLINE}
 over_original true
 addUserKnob {6 keep_alpha l "Keep Original Alpha" -STARTLINE}
 keep_alpha true
 addUserKnob {26 ""}
 addUserKnob {41 operation T CP_Merge.operation}
 addUserKnob {26 ""}
 addUserKnob {41 type l Type T CP_Expression.type}
 addUserKnob {41 type2 l Type2 T CP_Expression.type2}
 addUserKnob {41 direction l Direction T CP_Expression.direction}
 addUserKnob {41 direction2 l Direction2 T CP_Expression.direction2}
 addUserKnob {41 size l Size T CP_Expression.size}
 addUserKnob {41 size2 l Size2 T CP_Expression.size2}
 addUserKnob {41 offset l Offset T CP_Expression.offset}
 addUserKnob {41 offset2 l Offset2 T CP_Expression.offset2}
 addUserKnob {41 speed l Speed T CP_Expression.speed}
 addUserKnob {41 speed2 l Speed2 T CP_Expression.speed2}
 addUserKnob {41 multiply l Color T CP_Grade2.multiply}
 addUserKnob {26 ""}
 addUserKnob {7 roundness l Roundness R 0 100}
 roundness 30
 addUserKnob {7 contr l Contrast}
 contr 1
 addUserKnob {26 ""}
 addUserKnob {26 TEXT l "" +STARTLINE T "<font color=#808080 size=\"5\" >1.01 version</font>"}
 addUserKnob {26 HeadlineB l "" +STARTLINE T "<font color=#808080 size=\"2\">GM_CrossPatternÂ© by Attila Gasparetz</font>"}
}
 Input {
  inputs 0
  name Input
  xpos 70
  ypos -466
 }
 Dot {
  name Dot1
  xpos 104
  ypos -366
 }
set N362ed880 [stack 0]
 Dot {
  name Dot2
  xpos 434
  ypos -366
 }
set N362ed500 [stack 0]
 Dot {
  name Dot7
  xpos 654
  ypos -366
 }
 Dot {
  name Dot8
  xpos 654
  ypos 714
 }
set N362ece00 [stack 0]
 Dot {
  name Dot10
  xpos 764
  ypos 714
 }
 Dot {
  name Dot9
  xpos 764
  ypos 1098
 }
push $N362ed880
 Expression {
  expr0 "ceil((\[value type](y/size\[if \{\[numvalue direction] == 0\} \{return \"-\"\} else \{return \"+\"\}]((frame+offset)*(speed/100)))) + (\[value type](x/size\[if \{\[numvalue direction] == 0\} \{return \"-\"\} else \{return \"+\"\}]((frame+offset)*(speed/100)))))"
  expr1 "ceil((\[value type2](y/size2\[if \{\[numvalue direction2] == 0\} \{return \"-\"\} else \{return \"+\"\}]((frame+offset2)*(speed2/100)))) / (\[value type2](x/size2\[if \{\[numvalue direction2] == 0\} \{return \"-\"\} else \{return \"+\"\}]((frame+offset2)*(speed2/100)))))"
  name CP_Expression
  xpos 70
  ypos -274
  addUserKnob {20 User}
  addUserKnob {4 type l Type M {sin cos tan}}
  addUserKnob {4 type2 l Type2 M {sin cos tan}}
  addUserKnob {4 direction l Direction M {Up Down ""}}
  addUserKnob {4 direction2 l Direction2 M {Up Down}}
  direction2 Down
  addUserKnob {7 size l Size R 0 100}
  size 30
  addUserKnob {7 size2 l Size2 R 0 100}
  size2 50
  addUserKnob {7 offset l Offset R 0 100}
  addUserKnob {7 offset2 l Offset2 R 0 100}
  addUserKnob {7 speed l Speed R 0 100}
  speed 5
  addUserKnob {7 speed2 l Speed2 R 0 100}
  speed2 5
 }
set N362ec380 [stack 0]
 Shuffle {
  green black
  blue black
  alpha black
  name CP_ShuffleR
  xpos 70
  ypos -154
 }
 Clamp {
  name CP_Clamp1
  xpos 70
  ypos -88
 }
push $N362ec380
 Shuffle {
  red green
  green black
  blue black
  alpha black
  name CP_ShuffleG
  xpos 180
  ypos -154
 }
 Clamp {
  name CP_Clamp2
  xpos 180
  ypos -88
 }
 Merge2 {
  inputs 2
  operation multiply
  Achannels {rgba.red -rgba.green -rgba.blue rgba.alpha}
  Bchannels {rgba.red rgba.green -rgba.blue rgba.alpha}
  output rgb
  name CP_Merge
  xpos 70
  ypos 14
 }
 Clamp {
  name CP_Clamp3
  xpos 70
  ypos 80
 }
 Shuffle {
  red black
  green black
  blue black
  alpha red
  name Shuffle4
  xpos 70
  ypos 158
 }
 Group {
  name key_chew
  help "======== KeyChew beta ========\n=============================\n\nThis is a port of the KeyChew macro for Shake to Nuke.\n\nThere might be tiny differences on the results given in both apps. Some of them are caused by the internal algorithms of each app, and others by the way I faked the JSplineV\nexpression of Shake in Nuke. If you know a better way to solve this, let\nme know!!\n\n=============================\n             2009 Cuco Bures\n============================="
  xpos 70
  ypos 230
  addUserKnob {20 Controls}
  addUserKnob {7 chew t "\t\t" R -200 200}
  chew {{-parent.roundness}}
  addUserKnob {7 soften R 0 200}
  addUserKnob {6 matteMult +STARTLINE}
 }
  Input {
   inputs 0
   name Input
   xpos 0
  }
set N36308380 [stack 0]
  Dot {
   name Dot1
   xpos 366
   ypos 5
  }
set N36308000 [stack 0]
push $N36308000
  Invert {
   name Invert1
   xpos 177
   ypos 34
  }
push $N36308000
  Switch {
   inputs 2
   which {{"\[value parent.chew]>=0?0:1"}}
   name Switch1
   xpos 177
   ypos 87
  }
  Blur {
   size {{"(floor(abs(\[value parent.chew]))/4)+(floor(abs(\[value parent.chew]))/8)" i}}
   name FgEdgeBlur
   xpos 177
   ypos 111
  }
  Grade {
   channels alpha
   multiply {1 1 1 {max(FgEdgeBlur.size*1.5,1) i}}
   black_clamp false
   name FgEdgeMult
   xpos 177
   ypos 165
  }
  Grade {
   channels alpha
   gamma {1 1 1 {JSplineVFake(floor(abs(parent.chew))) i}}
   name FgEdgeGamma1
   xpos 177
   ypos 213
   addUserKnob {20 User}
   addUserKnob {7 JSplineVFake}
   JSplineVFake {{curve i l 0.9958 k x5 0.95 0.8 x20 0.5 x40 0.3 x80 0.2 l x200 0.1}}
  }
set N36346e00 [stack 0]
  Merge2 {
   inputs 2
   operation minus
   name Merge1
   xpos 332
   ypos 218
  }
push $N36346e00
  Switch {
   inputs 2
   which {{"\[value parent.chew]>=0?0:1"}}
   name Switch2
   xpos 177
   ypos 284
  }
  Clamp {
   name Clamp2
   xpos 177
   ypos 323
  }
  Blur {
   size {{"(floor(abs(\[value parent.soften]))/4)+(floor(abs(\[value parent.soften]))/8)"}}
   name BlurResult
   xpos 177
   ypos 446
  }
push $N36308380
  ShuffleCopy {
   inputs 2
   name ShuffleCopy1
   xpos 0
   ypos 451
  }
  Premult {
   name Premult1
   xpos 0
   ypos 486
   disable {{"1-\[value parent.matteMult]" i}}
  }
  Output {
   name Output1
   xpos 0
   ypos 556
  }
 end_group
 Group {
  name key_chew1
  help "======== KeyChew beta ========\n=============================\n\nThis is a port of the KeyChew macro for Shake to Nuke.\n\nThere might be tiny differences on the results given in both apps. Some of them are caused by the internal algorithms of each app, and others by the way I faked the JSplineV\nexpression of Shake in Nuke. If you know a better way to solve this, let\nme know!!\n\n=============================\n             2009 Cuco Bures\n============================="
  xpos 70
  ypos 302
  addUserKnob {20 Controls}
  addUserKnob {7 chew t "\t\t" R -200 200}
  chew {{-parent.key_chew.chew}}
  addUserKnob {7 soften R 0 200}
  addUserKnob {6 matteMult +STARTLINE}
 }
  Input {
   inputs 0
   name Input
   xpos 0
  }
set N36385180 [stack 0]
  Dot {
   name Dot1
   xpos 366
   ypos 5
  }
set N36384e00 [stack 0]
push $N36384e00
  Invert {
   name Invert1
   xpos 177
   ypos 34
  }
push $N36384e00
  Switch {
   inputs 2
   which {{"\[value parent.chew]>=0?0:1"}}
   name Switch1
   xpos 177
   ypos 87
  }
  Blur {
   size {{"(floor(abs(\[value parent.chew]))/4)+(floor(abs(\[value parent.chew]))/8)" i}}
   name FgEdgeBlur
   xpos 177
   ypos 111
  }
  Grade {
   channels alpha
   multiply {1 1 1 {max(FgEdgeBlur.size*1.5,1) i}}
   black_clamp false
   name FgEdgeMult
   xpos 177
   ypos 165
  }
  Grade {
   channels alpha
   gamma {1 1 1 {JSplineVFake(floor(abs(parent.chew))) i}}
   name FgEdgeGamma1
   xpos 177
   ypos 213
   addUserKnob {20 User}
   addUserKnob {7 JSplineVFake}
   JSplineVFake {{curve i l 0.9958 k x5 0.95 0.8 x20 0.5 x40 0.3 x80 0.2 l x200 0.1}}
  }
set N363bdc00 [stack 0]
  Merge2 {
   inputs 2
   operation minus
   name Merge1
   xpos 332
   ypos 218
  }
push $N363bdc00
  Switch {
   inputs 2
   which {{"\[value parent.chew]>=0?0:1"}}
   name Switch2
   xpos 177
   ypos 284
  }
  Clamp {
   name Clamp2
   xpos 177
   ypos 323
  }
  Blur {
   size {{"(floor(abs(\[value parent.soften]))/4)+(floor(abs(\[value parent.soften]))/8)"}}
   name BlurResult
   xpos 177
   ypos 446
  }
push $N36385180
  ShuffleCopy {
   inputs 2
   name ShuffleCopy1
   xpos 0
   ypos 451
  }
  Premult {
   name Premult1
   xpos 0
   ypos 486
   disable {{"1-\[value parent.matteMult]" i}}
  }
  Output {
   name Output1
   xpos 0
   ypos 556
  }
 end_group
 Clamp {
  name CP_Clamp4
  xpos 70
  ypos 368
 }
 Grade {
  channels all
  blackpoint {{"parent.contr * .45"}}
  whitepoint {{"1 - ( blackpoint * 1.1) "}}
  white_clamp true
  name CP_Grade
  xpos 70
  ypos 464
 }
 Shuffle {
  red alpha
  green alpha
  blue alpha
  name Shuffle5
  xpos 70
  ypos 518
 }
 Dot {
  name Dot3
  xpos 104
  ypos 570
 }
set N36403500 [stack 0]
 Dot {
  name Dot4
  xpos 104
  ypos 642
 }
set N36403180 [stack 0]
 Dot {
  name Dot5
  xpos 104
  ypos 714
 }
set N36402e00 [stack 0]
 Dot {
  name Dot6
  xpos 104
  ypos 834
 }
push $N36402e00
push $N36403180
push $N36403500
push $N362ed500
 Remove {
  name CP_Remove
  xpos 400
  ypos 488
 }
 Copy {
  inputs 2
  from0 rgba.alpha
  to0 rgba.red
  name CP_CopyR
  tile_color 0xff0000ff
  xpos 400
  ypos 560
  disable {{!parent.red}}
 }
 Copy {
  inputs 2
  from0 rgba.alpha
  to0 rgba.green
  name CP_CopyG
  tile_color 0x1fff00ff
  xpos 400
  ypos 632
  disable {{!parent.green}}
 }
 Copy {
  inputs 2
  from0 rgba.alpha
  to0 rgba.blue
  name CP_CopyB
  tile_color 0x3fffff
  xpos 400
  ypos 704
  disable {{!parent.blue}}
 }
 Grade {
  name CP_Grade2
  selected true
  xpos 400
  ypos 758
 }
 Copy {
  inputs 2
  from0 rgba.alpha
  to0 rgba.alpha
  name CP_CopyA
  tile_color 0x999999ff
  xpos 400
  ypos 824
  disable {{!parent.alpha}}
 }
 Premult {
  name Premult1
  xpos 400
  ypos 902
 }
set N36435180 [stack 0]
push $N36435180
push $N362ece00
 Merge2 {
  inputs 2
  name Merge1
  xpos 620
  ypos 902
 }
 Switch {
  inputs 2
  which {{!parent.over_original}}
  name Switch1
  label "Which: \[value which]"
  xpos 510
  ypos 992
 }
 Copy {
  inputs 2
  from0 rgba.alpha
  to0 rgba.alpha
  name Copy1
  xpos 510
  ypos 1088
  disable {{!parent.keep_alpha}}
 }
 Output {
  name Output1
  xpos 510
  ypos 1190
 }
end_group
